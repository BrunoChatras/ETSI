tosca_definitions_version: tosca_simple_yaml_1_3

description: VNF that can be configured using Ansible

imports:
  - etsi_nfv_sol001_vnfd_types.yaml  # all of TOSCA VNFD types as defined in ETSI GS NFV-SOL 001

data_types:

  Mycompany.datatypes.nfv.VnfConfigurableProperties:
    derived_from: tosca.datatypes.nfv.VnfConfigurableProperties
    properties:
      additional_configurable_properties:
        type: MyCompany.datatypes.nfv.VnfAdditionalConfigurableProperties

  MyCompany.datatypes.nfv.VnfAdditionalConfigurableProperties:
    derived_from: tosca.datatypes.nfv.VnfAdditionalConfigurableProperties
    properties:
      parameter_1:
        type: string
        required: true
        default: value_1
      parameter_2:
        type: string
        required: true
        default: value_2

node_types:

  MyCompany.ExampleVnf.1_0.1_0:
    derived_from: tosca.nodes.nfv.VNF
    properties:
      descriptor_id: b1bb0ce7-ebca-4fa7-95ed-4840d70a1177
      provider: MyCompany
      product_name: ExampleVnf
      software_version: '1.0'
      descriptor_version: '1.0'
      flavour_id:         
        constraints: [ valid_values: [ simple, configurable ] ]
        default: simple
      flavour_description:         
        default: ""  
      vnfm_info: [ '0:MyCompany-1.0.0' ]   
      configurable_properties:
        type: Mycompany.datatypes.nfv.VnfConfigurableProperties
        description: Describes the configurable properties of the VNF
        required: false      
    interfaces:
      Vnflcm:
        type: tosca.interfaces.nfv.Vnflcm
        operations:
          instantiate:           
            inputs:          
              configurable_parameters:
                type: Mycompany.datatypes.nfv.VnfConfigurableProperties
                required: false


topology_template:

  inputs: 
    configurable_properties:
      type: Mycompany.datatypes.nfv.VnfConfigurableProperties

  substitution_mappings:
    node_type: MyCompany.ExampleVnf.1_0.1_0 
    requirements:
      virtual_link: [ singleVnfcExternalCp, virtual_link ]  
      

  node_templates:

    ExampleVnf:
      type: MyCompany.ExampleVnf.1_0.1_0
      properties:
        flavour_id : configurable
        flavour_description: A configurable flavour
        configurable_properties: { get_input: configurable_properties }
      interfaces:
        Vnflcm: 
          operations:
            instantiate:  
              inputs: 
                configurable_parameters:
                   additional_configurable_properties:
                      parameter_1: { get_property: [SELF, configurable_properties, additional_configurable_properties, parameter_1 ] }
                      parameter_2: { get_property: [SELF, configurable_properties, additional_configurable_properties, parameter_2 ] }
            instantiate_end:
              implementation: ansible_configuration              
      artifacts:
        ansible_configuration:
          description: script to trigger VNF configuration. The script takes as input the configurable_parameters input of the instantiate operation 
          type: tosca.artifacts.Implementation.Python
          file: /other_files/ansible/ansible.py #available in the VNF package


    singleVnfc:
      type: tosca.nodes.nfv.Vdu.Compute
      properties:
        name: singleVnfc
        description: This is the single VNFC for this VNF
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 2        
      capabilities:
        virtual_compute:
          properties:
            virtual_memory:
              virtual_mem_size: 4 GB
            virtual_cpu:
              num_virtual_cpu: 2
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: singleVnfc.image.v1.0.qcow2
          properties:
            name: Software for the single VNFC
            version: '1.0'
            checksum:
              algorithm: sha-256
              hash: b9c3036539fd7a5f87a1bf38eb05fdde8b556a1a7e664dbeda90ed3cd74b4f9d
            container_format: bare          
            size: 2 GB

    singleVnfcExternalCp:
      type: tosca.nodes.nfv.VduCp
      properties:
        layer_protocols: [ ipv4 ]
        description: connection point on an external VL
      requirements:
        - virtual_binding: singleVnfc
        #- virtual_link: # the target node is determined in the NSD
